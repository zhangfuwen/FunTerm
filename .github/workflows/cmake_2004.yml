name: make for ubuntu 20.04

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  # Customize the CMake build type here (Release, Debug, RelWithDebInfo, etc.)
  BUILD_TYPE: Release

jobs:
  build:
    # The CMake configure and build commands are platform agnostic and should work equally well on Windows or Mac.
    # You can convert this to a matrix build if you need cross-platform coverage.
    # See: https://docs.github.com/en/free-pro-team@latest/actions/learn-github-actions/managing-complex-workflows#using-a-build-matrix
    runs-on: ubuntu-20.04

    steps:
      - uses: actions/checkout@v2

      - name: install meson
        run: sudo apt install -y python3-pip ; sudo pip3 install meson==0.61.2

      - name: prepare
        run: sudo apt install gnutls-bin g++-11 libgnutls30 libsystemd-dev valac gobject-introspection python3-gi libgirepository1.0-dev libvte-dev libgnutls* libibus-1.0-dev libgtkmm-3.0-dev g++ libpulse-dev libpsl-dev libbrotli-dev ninja-build libnautilus-extension-dev

      - name: update g++
        run: sudo update-alternatives --install /usr/bin/gcc gcc /usr/bin/gcc-11 100 --slave /usr/bin/g++ g++ /usr/bin/g++-11 --slave /usr/bin/gcov gcov /usr/bin/gcov-11; sudo update-alternatives --install /usr/bin/cc cc /usr/bin/gcc 300; sudo update-alternatives --set cc /usr/bin/gcc; sudo update-alternatives --install /usr/bin/c++ c++ /usr/bin/g++ 300; sudo update-alternatives --set c++ /usr/bin/g++

      - name: prepare vte
        run: bash prepare_vte.sh

      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{env.BUILD_TYPE}}

      - name: Build
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{env.BUILD_TYPE}}

      - name: AppImage
        run: bash ./build_appimage.sh

      - name: Test
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: ctest -C ${{env.BUILD_TYPE}}

      - name: Pack
        working-directory: ${{github.workspace}}/build
        # Execute tests defined by the CMake configuration.
        # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
        run: cpack

      - uses: actions/upload-artifact@v2
        with:
          name: my_deb
          path: ${{github.workspace}}/build/funterm-1.1-Linux.deb

      - uses: actions/upload-artifact@v2
        with:
          name: my_appimage
          path: ${{github.workspace}}/build/*.appimage


      
